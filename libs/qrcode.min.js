// QR Code Generator - Android Camera Compatible
(function(global) {
  'use strict';
  
  // QR Code Error Correction Levels
  const ERROR_CORRECTION_LEVEL = {
    L: 1, // ~7% correction
    M: 0, // ~15% correction  
    Q: 3, // ~25% correction
    H: 2  // ~30% correction
  };
  
  // QR Code version patterns
  const VERSION_PATTERNS = [
    0x07c94, 0x085bc, 0x09a99, 0x0a4d3, 0x0bbf6, 0x0c762, 0x0d847, 0x0e60d,
    0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9,
    0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
    0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64,
    0x27541, 0x28c69
  ];
  
  // Format information patterns
  const FORMAT_INFO = [
    [0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976],
    [0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0],
    [0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed],
    [0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b]
  ];
  
  // Alignment patterns
  const ALIGNMENT_PATTERN = [
    [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42],
    [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66],
    [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86],
    [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
  ];
  
  // Data encoding modes
  const MODE = {
    NUMERIC: 0,
    ALPHANUMERIC: 1,
    BYTE: 2,
    KANJI: 3
  };
  
  function QRCode(text, options) {
    options = options || {};
    this.text = text;
    this.errorCorrectionLevel = options.errorCorrectionLevel || 'M';
    this.typeNumber = options.typeNumber || 0;
    this.mode = options.mode || MODE.BYTE;
    this.maskPattern = options.maskPattern || -1;
    
    this.modules = null;
    this.moduleCount = 0;
  }
  
  QRCode.prototype.make = function() {
    this.makeImpl(false, this.getBestMaskPattern());
  };
  
  QRCode.prototype.makeImpl = function(test, maskPattern) {
    this.moduleCount = this.typeNumber * 4 + 17;
    this.modules = new Array(this.moduleCount);
    
    for (let row = 0; row < this.moduleCount; row++) {
      this.modules[row] = new Array(this.moduleCount);
      for (let col = 0; col < this.moduleCount; col++) {
        this.modules[row][col] = null;
      }
    }
    
    this.setupPositionProbePattern(0, 0);
    this.setupPositionProbePattern(this.moduleCount - 7, 0);
    this.setupPositionProbePattern(0, this.moduleCount - 7);
    this.setupPositionAdjustPattern();
    this.setupTimingPattern();
    this.setupTypeInfo(test, maskPattern);
    
    if (this.typeNumber >= 7) {
      this.setupTypeNumber(test);
    }
    
    if (this.maskPattern >= 0) {
      this.maskPattern = maskPattern;
    }
    
    this.mapData(this.createData(), maskPattern);
  };
  
  QRCode.prototype.setupPositionProbePattern = function(row, col) {
    for (let r = -1; r <= 7; r++) {
      for (let c = -1; c <= 7; c++) {
        if (row + r >= 0 && this.moduleCount > row + r && col + c >= 0 && this.moduleCount > col + c) {
          if ((0 <= r && r <= 6 && (c == 0 || c == 6)) || (0 <= c && c <= 6 && (r == 0 || r == 6)) || (2 <= r && r <= 4 && 2 <= c && c <= 4)) {
            this.modules[row + r][col + c] = true;
          } else {
            this.modules[row + r][col + c] = false;
          }
        }
      }
    }
  };
  
  QRCode.prototype.setupTimingPattern = function() {
    for (let r = 8; r < this.moduleCount - 8; r++) {
      if (this.modules[r][6] == null) {
        this.modules[r][6] = (r % 2 == 0);
      }
    }
    for (let c = 8; c < this.moduleCount - 8; c++) {
      if (this.modules[6][c] == null) {
        this.modules[6][c] = (c % 2 == 0);
      }
    }
  };
  
  QRCode.prototype.setupPositionAdjustPattern = function() {
    const pos = ALIGNMENT_PATTERN[this.typeNumber - 1];
    if (pos == null) return;
    
    for (let i = 0; i < pos.length; i++) {
      for (let j = 0; j < pos.length; j++) {
        const row = pos[i];
        const col = pos[j];
        if (this.modules[row][col] == null) {
          for (let r = -2; r <= 2; r++) {
            for (let c = -2; c <= 2; c++) {
              if (r == -2 || r == 2 || c == -2 || c == 2 || (r == 0 && c == 0)) {
                this.modules[row + r][col + c] = true;
              } else {
                this.modules[row + r][col + c] = false;
              }
            }
          }
        }
      }
    }
  };
  
  QRCode.prototype.setupTypeInfo = function(test, maskPattern) {
    const data = (ERROR_CORRECTION_LEVEL[this.errorCorrectionLevel] << 3) | maskPattern;
    const bits = this.getBCHTypeInfo(data);
    
    // vertical
    for (let i = 0; i < 15; i++) {
      const mod = !test && ((bits >> i) & 1) == 1;
      
      if (i < 6) {
        this.modules[i][8] = mod;
      } else if (i < 8) {
        this.modules[i + 1][8] = mod;
      } else {
        this.modules[this.moduleCount - 15 + i][8] = mod;
      }
    }
    
    // horizontal
    for (let i = 0; i < 15; i++) {
      const mod = !test && ((bits >> i) & 1) == 1;
      
      if (i < 8) {
        this.modules[8][this.moduleCount - i - 1] = mod;
      } else if (i < 9) {
        this.modules[8][15 - i - 1 + 1] = mod;
      } else {
        this.modules[8][15 - i - 1] = mod;
      }
    }
    
    // fixed module
    this.modules[this.moduleCount - 8][8] = !test;
  };
  
  QRCode.prototype.setupTypeNumber = function(test) {
    const bits = this.getBCHTypeNumber(this.typeNumber);
    
    for (let i = 0; i < 18; i++) {
      const mod = !test && ((bits >> i) & 1) == 1;
      this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
    }
    
    for (let i = 0; i < 18; i++) {
      const mod = !test && ((bits >> i) & 1) == 1;
      this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
    }
  };
  
  QRCode.prototype.getBCHTypeInfo = function(data) {
    let d = data << 10;
    while (this.getBCHDigit(d) - this.getBCHDigit(0x537) >= 0) {
      d ^= (0x537 << (this.getBCHDigit(d) - this.getBCHDigit(0x537)));
    }
    return ((data << 10) | d) ^ 0x5412;
  };
  
  QRCode.prototype.getBCHTypeNumber = function(data) {
    let d = data << 12;
    while (this.getBCHDigit(d) - this.getBCHDigit(0x1f25) >= 0) {
      d ^= (0x1f25 << (this.getBCHDigit(d) - this.getBCHDigit(0x1f25)));
    }
    return (data << 12) | d;
  };
  
  QRCode.prototype.getBCHDigit = function(data) {
    let digit = 0;
    while (data != 0) {
      digit++;
      data >>>= 1;
    }
    return digit;
  };
  
  QRCode.prototype.createData = function() {
    const buffer = new QRBitBuffer();
    buffer.put(this.mode, 4);
    buffer.put(this.getLengthInBits(this.mode, this.typeNumber), this.getLengthInBits(this.mode, this.typeNumber));
    this.write(buffer);
    
    // Calculate number of data codewords
    const rsBlocks = this.getRSBlocks(this.typeNumber, this.errorCorrectionLevel);
    let totalDataCount = 0;
    for (let i = 0; i < rsBlocks.length; i++) {
      totalDataCount += rsBlocks[i].dataCount;
    }
    
    const totalDataBits = totalDataCount * 8;
    if (buffer.getLengthInBits() > totalDataBits) {
      throw new Error('code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataBits + ')');
    }
    
    // end code
    if (buffer.getLengthInBits() + 4 <= totalDataBits) {
      buffer.put(0, 4);
    }
    
    // padding
    while (buffer.getLengthInBits() % 8 != 0) {
      buffer.putBit(false);
    }
    
    // padding
    while (true) {
      if (buffer.getLengthInBits() >= totalDataBits) {
        break;
      }
      buffer.put(0xEC, 8);
      
      if (buffer.getLengthInBits() >= totalDataBits) {
        break;
      }
      buffer.put(0x11, 8);
    }
    
    return this.createBytes(buffer, rsBlocks);
  };
  
  QRCode.prototype.getLengthInBits = function(mode, type) {
    if (1 <= type && type < 10) {
      // 1 - 9
      switch (mode) {
        case MODE.NUMERIC: return 10;
        case MODE.ALPHANUMERIC: return 9;
        case MODE.BYTE: return 8;
        case MODE.KANJI: return 8;
        default:
          throw new Error('mode:' + mode);
      }
    } else if (type < 27) {
      // 10 - 26
      switch (mode) {
        case MODE.NUMERIC: return 12;
        case MODE.ALPHANUMERIC: return 11;
        case MODE.BYTE: return 16;
        case MODE.KANJI: return 10;
        default:
          throw new Error('mode:' + mode);
      }
    } else if (type < 41) {
      // 27 - 40
      switch (mode) {
        case MODE.NUMERIC: return 14;
        case MODE.ALPHANUMERIC: return 13;
        case MODE.BYTE: return 16;
        case MODE.KANJI: return 12;
        default:
          throw new Error('mode:' + mode);
      }
    } else {
      throw new Error('type:' + type);
    }
  };
  
  QRCode.prototype.write = function(buffer) {
    for (let i = 0; i < this.text.length; i++) {
      buffer.put(this.text.charCodeAt(i), 8);
    }
  };
  
  QRCode.prototype.getRSBlocks = function(typeNumber, errorCorrectionLevel) {
    const rsBlock = this.getRsBlockTable(typeNumber, errorCorrectionLevel);
    if (rsBlock == null) {
      throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectionLevel:' + errorCorrectionLevel);
    }
    
    const length = rsBlock.length / 3;
    const list = new Array();
    
    for (let i = 0; i < length; i++) {
      const count = rsBlock[i * 3 + 0];
      const totalCount = rsBlock[i * 3 + 1];
      const dataCount = rsBlock[i * 3 + 2];
      
      for (let j = 0; j < count; j++) {
        list.push(new QRRSBlock(totalCount, dataCount));
      }
    }
    
    return list;
  };
  
  QRCode.prototype.getRsBlockTable = function(typeNumber, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
      case 'L':
        return this.getRsBlockTableL(typeNumber);
      case 'M':
        return this.getRsBlockTableM(typeNumber);
      case 'Q':
        return this.getRsBlockTableQ(typeNumber);
      case 'H':
        return this.getRsBlockTableH(typeNumber);
      default:
        return null;
    }
  };
  
  QRCode.prototype.getRsBlockTableL = function(typeNumber) {
    switch (typeNumber) {
      case 1: return [1, 26, 19];
      case 2: return [1, 44, 34];
      case 3: return [1, 70, 55];
      case 4: return [1, 100, 80];
      case 5: return [1, 134, 108];
      case 6: return [2, 86, 68];
      case 7: return [2, 98, 78];
      case 8: return [2, 121, 97];
      case 9: return [2, 146, 116];
      case 10: return [2, 86, 68, 2, 87, 69];
      case 11: return [4, 101, 81];
      case 12: return [2, 116, 92, 2, 117, 93];
      case 13: return [4, 133, 107];
      case 14: return [3, 145, 115, 1, 146, 116];
      case 15: return [5, 109, 87, 1, 110, 88];
      case 16: return [5, 122, 98, 1, 123, 99];
      case 17: return [1, 135, 107, 5, 136, 108];
      case 18: return [5, 150, 120, 1, 151, 121];
      case 19: return [3, 141, 113, 4, 142, 114];
      case 20: return [3, 135, 107, 5, 136, 108];
      case 21: return [4, 144, 116, 4, 145, 117];
      case 22: return [2, 139, 111, 7, 140, 112];
      case 23: return [4, 151, 121, 5, 152, 122];
      case 24: return [6, 147, 117, 4, 148, 118];
      case 25: return [8, 132, 106, 4, 133, 107];
      case 26: return [10, 142, 114, 2, 143, 115];
      case 27: return [8, 152, 122, 4, 153, 123];
      case 28: return [3, 147, 117, 10, 148, 118];
      case 29: return [7, 146, 116, 7, 147, 117];
      case 30: return [5, 145, 115, 10, 146, 116];
      case 31: return [13, 145, 115, 3, 146, 116];
      case 32: return [17, 145, 115];
      case 33: return [17, 145, 115, 1, 146, 116];
      case 34: return [13, 145, 115, 6, 146, 116];
      case 35: return [12, 151, 121, 7, 152, 122];
      case 36: return [6, 151, 121, 14, 152, 122];
      case 37: return [17, 152, 122, 4, 153, 123];
      case 38: return [4, 152, 122, 18, 153, 123];
      case 39: return [20, 147, 117, 4, 148, 118];
      case 40: return [19, 148, 118, 6, 149, 119];
      default: return null;
    }
  };
  
  QRCode.prototype.getRsBlockTableM = function(typeNumber) {
    switch (typeNumber) {
      case 1: return [1, 26, 16];
      case 2: return [1, 44, 28];
      case 3: return [1, 70, 44];
      case 4: return [1, 100, 64];
      case 5: return [1, 134, 86];
      case 6: return [2, 86, 56];
      case 7: return [2, 98, 62];
      case 8: return [2, 121, 78];
      case 9: return [2, 146, 92];
      case 10: return [2, 86, 56, 2, 87, 57];
      case 11: return [4, 101, 65];
      case 12: return [2, 116, 74, 2, 117, 75];
      case 13: return [4, 133, 85];
      case 14: return [3, 145, 93, 1, 146, 94];
      case 15: return [5, 109, 69, 1, 110, 70];
      case 16: return [5, 122, 78, 1, 123, 79];
      case 17: return [1, 135, 85, 5, 136, 86];
      case 18: return [5, 150, 96, 1, 151, 97];
      case 19: return [3, 141, 89, 4, 142, 90];
      case 20: return [3, 135, 85, 5, 136, 86];
      case 21: return [4, 144, 92, 4, 145, 93];
      case 22: return [2, 139, 87, 7, 140, 88];
      case 23: return [4, 151, 97, 5, 152, 98];
      case 24: return [6, 147, 93, 4, 148, 94];
      case 25: return [8, 132, 82, 4, 133, 83];
      case 26: return [10, 142, 90, 2, 143, 91];
      case 27: return [8, 152, 98, 4, 153, 99];
      case 28: return [3, 147, 93, 10, 148, 94];
      case 29: return [7, 146, 92, 7, 147, 93];
      case 30: return [5, 145, 91, 10, 146, 92];
      case 31: return [13, 145, 91, 3, 146, 92];
      case 32: return [17, 145, 91];
      case 33: return [17, 145, 91, 1, 146, 92];
      case 34: return [13, 145, 91, 6, 146, 92];
      case 35: return [12, 151, 97, 7, 152, 98];
      case 36: return [6, 151, 97, 14, 152, 98];
      case 37: return [17, 152, 98, 4, 153, 99];
      case 38: return [4, 152, 98, 18, 153, 99];
      case 39: return [20, 147, 93, 4, 148, 94];
      case 40: return [19, 148, 94, 6, 149, 95];
      default: return null;
    }
  };
  
  QRCode.prototype.getRsBlockTableQ = function(typeNumber) {
    switch (typeNumber) {
      case 1: return [1, 26, 13];
      case 2: return [1, 44, 22];
      case 3: return [2, 70, 17];
      case 4: return [2, 100, 24];
      case 5: return [2, 134, 15];
      case 6: return [4, 86, 19];
      case 7: return [4, 98, 18];
      case 8: return [4, 121, 16];
      case 9: return [4, 146, 19];
      case 10: return [6, 86, 19, 2, 87, 20];
      case 11: return [6, 101, 16];
      case 12: return [4, 116, 17, 4, 117, 18];
      case 13: return [4, 133, 16];
      case 14: return [6, 145, 19, 2, 146, 20];
      case 15: return [6, 109, 15, 2, 110, 16];
      case 16: return [6, 122, 17, 2, 123, 18];
      case 17: return [6, 135, 15, 2, 136, 16];
      case 18: return [6, 150, 19, 2, 151, 20];
      case 19: return [6, 141, 17, 4, 142, 18];
      case 20: return [6, 135, 15, 4, 136, 16];
      case 21: return [6, 144, 17, 4, 145, 18];
      case 22: return [6, 139, 17, 6, 140, 18];
      case 23: return [6, 151, 19, 6, 152, 20];
      case 24: return [6, 147, 18, 6, 148, 19];
      case 25: return [6, 132, 16, 6, 133, 17];
      case 26: return [6, 142, 18, 6, 143, 19];
      case 27: return [6, 152, 20, 6, 153, 21];
      case 28: return [6, 147, 18, 10, 148, 19];
      case 29: return [6, 146, 18, 10, 147, 19];
      case 30: return [6, 145, 18, 10, 146, 19];
      case 31: return [6, 145, 18, 14, 146, 19];
      case 32: return [6, 145, 18, 18, 146, 19];
      case 33: return [6, 145, 18, 22, 146, 19];
      case 34: return [6, 145, 18, 26, 146, 19];
      case 35: return [6, 151, 20, 30, 152, 21];
      case 36: return [6, 151, 20, 34, 152, 21];
      case 37: return [6, 152, 20, 38, 153, 21];
      case 38: return [6, 152, 20, 42, 153, 21];
      case 39: return [6, 147, 18, 46, 148, 19];
      case 40: return [6, 148, 18, 50, 149, 19];
      default: return null;
    }
  };
  
  QRCode.prototype.getRsBlockTableH = function(typeNumber) {
    switch (typeNumber) {
      case 1: return [1, 26, 9];
      case 2: return [1, 44, 13];
      case 3: return [2, 70, 11];
      case 4: return [2, 100, 15];
      case 5: return [2, 134, 13];
      case 6: return [4, 86, 14];
      case 7: return [4, 98, 12];
      case 8: return [4, 121, 15];
      case 9: return [4, 146, 12];
      case 10: return [6, 86, 14, 2, 87, 15];
      case 11: return [6, 101, 12];
      case 12: return [4, 116, 13, 4, 117, 14];
      case 13: return [4, 133, 12];
      case 14: return [6, 145, 12, 2, 146, 13];
      case 15: return [6, 109, 11, 2, 110, 12];
      case 16: return [6, 122, 13, 2, 123, 14];
      case 17: return [6, 135, 11, 2, 136, 12];
      case 18: return [6, 150, 12, 2, 151, 13];
      case 19: return [6, 141, 12, 4, 142, 13];
      case 20: return [6, 135, 11, 4, 136, 12];
      case 21: return [6, 144, 12, 4, 145, 13];
      case 22: return [6, 139, 12, 6, 140, 13];
      case 23: return [6, 151, 12, 6, 152, 13];
      case 24: return [6, 147, 12, 6, 148, 13];
      case 25: return [6, 132, 11, 6, 133, 12];
      case 26: return [6, 142, 12, 6, 143, 13];
      case 27: return [6, 152, 12, 6, 153, 13];
      case 28: return [6, 147, 12, 10, 148, 13];
      case 29: return [6, 146, 12, 10, 147, 13];
      case 30: return [6, 145, 12, 10, 146, 13];
      case 31: return [6, 145, 12, 14, 146, 13];
      case 32: return [6, 145, 12, 18, 146, 13];
      case 33: return [6, 145, 12, 22, 146, 13];
      case 34: return [6, 145, 12, 26, 146, 13];
      case 35: return [6, 151, 12, 30, 152, 13];
      case 36: return [6, 151, 12, 34, 152, 13];
      case 37: return [6, 152, 12, 38, 153, 13];
      case 38: return [6, 152, 12, 42, 153, 13];
      case 39: return [6, 147, 12, 46, 148, 13];
      case 40: return [6, 148, 12, 50, 149, 13];
      default: return null;
    }
  };
  
  QRCode.prototype.createBytes = function(buffer, rsBlocks) {
    let offset = 0;
    let maxDcCount = 0;
    let maxEcCount = 0;
    const dcdata = new Array(rsBlocks.length);
    const ecdata = new Array(rsBlocks.length);
    
    for (let r = 0; r < rsBlocks.length; r++) {
      const dcCount = rsBlocks[r].dataCount;
      const ecCount = rsBlocks[r].totalCount - dcCount;
      
      maxDcCount = Math.max(maxDcCount, dcCount);
      maxEcCount = Math.max(maxEcCount, ecCount);
      
      dcdata[r] = new Array(dcCount);
      for (let i = 0; i < dcdata[r].length; i++) {
        dcdata[r][i] = 0xff & buffer.buffer[i + offset];
      }
      offset += dcCount;
      
      const rsPoly = this.getErrorCorrectPolynomial(ecCount);
      const rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
      const modPoly = rawPoly.mod(rsPoly);
      ecdata[r] = new Array(rsPoly.getLength() - 1);
      for (let i = 0; i < ecdata[r].length; i++) {
        const modIndex = i + modPoly.getLength() - ecdata[r].length;
        ecdata[r][i] = (modIndex >= 0) ? modPoly.get(modIndex) : 0;
      }
    }
    
    let totalCodeCount = 0;
    for (let i = 0; i < rsBlocks.length; i++) {
      totalCodeCount += rsBlocks[i].totalCount;
    }
    
    const data = new Array(totalCodeCount);
    let index = 0;
    
    for (let i = 0; i < maxDcCount; i++) {
      for (let r = 0; r < rsBlocks.length; r++) {
        if (i < dcdata[r].length) {
          data[index++] = dcdata[r][i];
        }
      }
    }
    
    for (let i = 0; i < maxEcCount; i++) {
      for (let r = 0; r < rsBlocks.length; r++) {
        if (i < ecdata[r].length) {
          data[index++] = ecdata[r][i];
        }
      }
    }
    
    return data;
  };
  
  QRCode.prototype.getErrorCorrectPolynomial = function(errorCorrectLength) {
    let a = new QRPolynomial([1], 0);
    for (let i = 0; i < errorCorrectLength; i++) {
      a = a.multiply(new QRPolynomial([1, this.gexp(i)], 0));
    }
    return a;
  };
  
  QRCode.prototype.getMask = function(maskPattern, i, j) {
    switch (maskPattern) {
      case 0: return (i + j) % 2 == 0;
      case 1: return i % 2 == 0;
      case 2: return j % 3 == 0;
      case 3: return (i + j) % 3 == 0;
      case 4: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
      case 5: return (i * j) % 2 + (i * j) % 3 == 0;
      case 6: return ((i * j) % 2 + (i * j) % 3) % 2 == 0;
      case 7: return ((i * j) % 3 + (i + j) % 2) % 2 == 0;
      default:
        throw new Error('bad maskPattern:' + maskPattern);
    }
  };
  
  QRCode.prototype.getBestMaskPattern = function() {
    let minLostPoint = 0;
    let pattern = 0;
    
    for (let i = 0; i < 8; i++) {
      this.makeImpl(true, i);
      const lostPoint = this.getLostPoint();
      
      if (i == 0 || minLostPoint > lostPoint) {
        minLostPoint = lostPoint;
        pattern = i;
      }
    }
    
    return pattern;
  };
  
  QRCode.prototype.getLostPoint = function() {
    const moduleCount = this.moduleCount;
    let lostPoint = 0;
    
    // LEVEL1
    for (let row = 0; row < moduleCount; row++) {
      for (let col = 0; col < moduleCount; col++) {
        let sameCount = 0;
        const dark = this.modules[row][col];
        
        for (let r = -1; r <= 1; r++) {
          if (row + r < 0 || moduleCount <= row + r) {
            continue;
          }
          for (let c = -1; c <= 1; c++) {
            if (col + c < 0 || moduleCount <= col + c) {
              continue;
            }
            if (r == 0 && c == 0) {
              continue;
            }
            if (dark == this.modules[row + r][col + c]) {
              sameCount++;
            }
          }
        }
        
        if (sameCount > 5) {
          lostPoint += (3 + sameCount - 5);
        }
      }
    }
    
    // LEVEL2
    for (let row = 0; row < moduleCount - 1; row++) {
      for (let col = 0; col < moduleCount - 1; col++) {
        let count = 0;
        if (this.modules[row][col]) count++;
        if (this.modules[row + 1][col]) count++;
        if (this.modules[row][col + 1]) count++;
        if (this.modules[row + 1][col + 1]) count++;
        if (count == 0 || count == 4) {
          lostPoint += 3;
        }
      }
    }
    
    // LEVEL3
    for (let row = 0; row < moduleCount; row++) {
      for (let col = 0; col < moduleCount - 6; col++) {
        if (this.modules[row][col] &&
            !this.modules[row][col + 1] &&
            this.modules[row][col + 2] &&
            this.modules[row][col + 3] &&
            this.modules[row][col + 4] &&
            !this.modules[row][col + 5] &&
            this.modules[row][col + 6]) {
          lostPoint += 40;
        }
      }
    }
    
    for (let row = 0; row < moduleCount - 6; row++) {
      for (let col = 0; col < moduleCount; col++) {
        if (this.modules[row][col] &&
            !this.modules[row + 1][col] &&
            this.modules[row + 2][col] &&
            this.modules[row + 3][col] &&
            this.modules[row + 4][col] &&
            !this.modules[row + 5][col] &&
            this.modules[row + 6][col]) {
          lostPoint += 40;
        }
      }
    }
    
    // LEVEL4
    let darkCount = 0;
    for (let col = 0; col < moduleCount; col++) {
      for (let row = 0; row < moduleCount; row++) {
        if (this.modules[row][col]) {
          darkCount++;
        }
      }
    }
    
    const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;
    
    return lostPoint;
  };
  
  QRCode.prototype.mapData = function(data, maskPattern) {
    let inc = -1;
    let row = this.moduleCount - 1;
    let bitIndex = 7;
    let byteIndex = 0;
    
    for (let col = this.moduleCount - 1; col > 0; col -= 2) {
      if (col == 6) col--;
      
      while (true) {
        for (let c = 0; c < 2; c++) {
          if (this.modules[row][col - c] == null) {
            let dark = false;
            
            if (byteIndex < data.length) {
              dark = (((data[byteIndex] >>> bitIndex) & 1) == 1);
            }
            
            const mask = this.getMask(maskPattern, row, col - c);
            
            if (mask) {
              dark = !dark;
            }
            
            this.modules[row][col - c] = dark;
            bitIndex--;
            
            if (bitIndex == -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }
        
        row += inc;
        
        if (row < 0 || this.moduleCount <= row) {
          row -= inc;
          inc = -inc;
          break;
        }
      }
    }
  };
  
  // Helper classes
  function QRBitBuffer() {
    this.buffer = new Array();
    this.length = 0;
  }
  
  QRBitBuffer.prototype = {
    get: function(index) {
      const bufIndex = Math.floor(index / 8);
      return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) == 1;
    },
    
    put: function(num, length) {
      for (let i = 0; i < length; i++) {
        this.putBit(((num >>> (length - i - 1)) & 1) == 1);
      }
    },
    
    getLengthInBits: function() {
      return this.length;
    },
    
    putBit: function(bit) {
      const bufIndex = Math.floor(this.length / 8);
      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }
      
      if (bit) {
        this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
      }
      
      this.length++;
    }
  };
  
  function QRPolynomial(num, shift) {
    if (num.length == undefined) {
      throw new Error(num.length + '/' + shift);
    }
    
    let offset = 0;
    while (offset < num.length && num[offset] == 0) {
      offset++;
    }
    
    this.num = new Array(num.length - offset + shift);
    for (let i = 0; i < num.length - offset; i++) {
      this.num[i] = num[i + offset];
    }
  }
  
  QRPolynomial.prototype = {
    get: function(index) {
      return this.num[index];
    },
    
    getLength: function() {
      return this.num.length;
    },
    
    multiply: function(e) {
      const num = new Array(this.getLength() + e.getLength() - 1);
      for (let i = 0; i < this.getLength(); i++) {
        for (let j = 0; j < e.getLength(); j++) {
          num[i + j] ^= this.gexp(this.glog(this.get(i)) + this.glog(e.get(j)));
        }
      }
      return new QRPolynomial(num, 0);
    },
    
    mod: function(e) {
      if (this.getLength() - e.getLength() < 0) {
        return this;
      }
      
      const ratio = this.glog(this.get(0)) - this.glog(e.get(0));
      const num = new Array(this.getLength());
      for (let i = 0; i < this.getLength(); i++) {
        num[i] = this.get(i);
      }
      
      for (let i = 0; i < e.getLength(); i++) {
        num[i] ^= this.gexp(this.glog(e.get(i)) + ratio);
      }
      
      return new QRPolynomial(num, 0).mod(e);
    }
  };
  
  function QRRSBlock(totalCount, dataCount) {
    this.totalCount = totalCount;
    this.dataCount = dataCount;
  }
  
  // Galois field operations
  QRCode.prototype.gexp = function(n) {
    while (n < 0) n += 255;
    while (n >= 255) n -= 255;
    return this.EXP_TABLE[n];
  };
  
  QRCode.prototype.glog = function(n) {
    if (n < 1) {
      throw new Error('glog(' + n + ')');
    }
    return this.LOG_TABLE[n];
  };
  
  QRCode.prototype.EXP_TABLE = new Array(256);
  QRCode.prototype.LOG_TABLE = new Array(256);
  
  for (let i = 0; i < 8; i++) {
    QRCode.prototype.EXP_TABLE[i] = 1 << i;
  }
  for (let i = 8; i < 256; i++) {
    QRCode.prototype.EXP_TABLE[i] = QRCode.prototype.EXP_TABLE[i - 4] ^ QRCode.prototype.EXP_TABLE[i - 5] ^ QRCode.prototype.EXP_TABLE[i - 6] ^ QRCode.prototype.EXP_TABLE[i - 8];
  }
  for (let i = 0; i < 255; i++) {
    QRCode.prototype.LOG_TABLE[QRCode.prototype.EXP_TABLE[i]] = i;
  }
  
  // Static method for toCanvas
  QRCode.toCanvas = function(canvas, text, options, callback) {
    try {
      const qr = new QRCode(text, options);
      qr.make();
      
      const ctx = canvas.getContext('2d');
      const size = options.width || 200;
      const margin = options.margin || 4;
      
      canvas.width = size;
      canvas.height = size;
      
      // Clear canvas with light color
      ctx.fillStyle = options.color?.light || '#FFFFFF';
      ctx.fillRect(0, 0, size, size);
      
      // Calculate module size
      const moduleSize = Math.floor((size - margin * 2) / qr.moduleCount);
      const offset = Math.floor((size - moduleSize * qr.moduleCount) / 2);
      
      // Draw QR code
      ctx.fillStyle = options.color?.dark || '#000000';
      for (let row = 0; row < qr.moduleCount; row++) {
        for (let col = 0; col < qr.moduleCount; col++) {
          if (qr.modules[row][col]) {
            ctx.fillRect(
              offset + col * moduleSize,
              offset + row * moduleSize,
              moduleSize,
              moduleSize
            );
          }
        }
      }
      
      if (callback) callback(null);
    } catch (error) {
      if (callback) callback(error);
    }
  };
  
  // Export
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = QRCode;
  } else {
    global.QRCode = QRCode;
  }
})(typeof window !== 'undefined' ? window : this);